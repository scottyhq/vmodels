# OKADA

# Autogenerated with SMOP version
# envs/py27/bin/smop -v okada85.m -o okada85.py
# Autoformatted with autopep8
# autopep8 -i okada85.py
# Manually cleaned up by Scott Henderson
# 05/24/2016


%OKADA85 Surface deformation due to a finite rectangular source.
%	[uE,uN,uZ,uZE,uZN,uNN,uNE,uEN,uEE] = OKADA85(...
%	   E,N,DEPTH,STRIKE,DIP,LENGTH,WIDTH,RAKE,SLIP,OPEN)
%	computes displacements, tilts and strains at the surface of an elastic
%	half-space, due to a dislocation defined by RAKE, SLIP, and OPEN on a
%	rectangular fault defined by orientation STRIKE and DIP, and size LENGTH and
%	WIDTH. The fault centroid is located (0,0,-DEPTH).
%
%	   E,N    : coordinates of observation points in a geographic referential
%	            (East,North,Up) relative to fault centroid (units are described below)
%	   DEPTH  : depth of the fault centroid (DEPTH > 0)
%	   STRIKE : fault trace direction (0 to 360 clockwise to North), defined so
%	            that the fault dips to the right side of the trace
%	   DIP    : angle between the fault and a horizontal plane (0 to 90)
%	   LENGTH : fault length in the STRIKE direction (LENGTH > 0)
%	   WIDTH  : fault width in the DIP direction (WIDTH > 0)
%	   RAKE   : direction the hanging wall moves during rupture, measured relative
%	            to the fault STRIKE (-180 to 180).
%	   SLIP   : dislocation in RAKE direction (length unit) (left-lateral is positive)
%	   OPEN   : dislocation in tensile component (same unit as SLIP)
%
%	returns the following variables (same matrix size as E and N):
%	   uN,uE,uZ        : displacements (unit of SLIP and OPEN)
Orginal matlab function from:
http://www.mathworks.com/matlabcentral/fileexchange/25982-okada--surface-deformation-due-to-a-finite-rectangular-source/content/okada85.m

# Strike-Slip Example
'''
print('Strike-slip fault benchmark')
xcen = 0
ycen = 0
U = 1.0  # [m] U is slip
# x,y are the observation points
d = 1e-3  # [m] # d is depth (positive down)
nu = 0.27  # nu is Poisson ratio
# [degrees] delta is dip angle, 90.0 exactly might cause numerical issues?
delta = 89.99
strike = 90.0  # [degrees] counter clockwise from north
length = 70e3  # [m] # len,W are the fault length and width, resp.
width = 15e3  # [m]
fault_type = 1  # fault_type is 1 2 3 for strike, dip, and opening
tp = np.zeros_like(x)  # tp is the optional topo vector (size(x))
params = dict(xcen=xcen, ycen=ycen, d=d, length=length, width=width,
              U=U, delta=delta, strike=strike,
              inc=inc, ald=ald, wavelength=wavelength, nu=nu)
'''

# Moved to benchmarks.okada()
"""
def benchmark(inc=23.0, ald=-77.0, wavelength=5.66):
'''
Make sure python output matches matlab output (from Yuri Fialko's SIC)
TODO: compare solutions to Okada 1985 Table 2
'''
    # Make grid NOTE: odd number so that center is symmetrical
n = 201
xvec = np.linspace(-25e3,25e3,n)
yvec = np.linspace(-25e3,25e3,n)
x,y = np.meshgrid(xvec,yvec)

# Run the model
params = dict(x=x, y=y, xcen=0, ycen=0,
        depth=5e3, length=1e3, width=1e3,
        slip=0.0, opening=0.0,
        strike=0.0, dip=0.0, rake=0.0,
        nu=0.25)
ux,uy,uz = forward(**params)

data = np.dstack([ux, uy, uz])
cart2los = plot.get_cart2los(inc, ald, x)  # NOTE: not sure why 'x' being passed...
los = np.sum(data * cart2los, axis=2)

# Plots - NOTE: not working... need to fix!
# Quick Fix: Change some variable names for the plots
params['xcen'] = params['xcen']
params['ycen'] = params['ycen']
params['delta'] = params['dip']
params['U'] = params['opening']
params['inc'] = inc
params['ald'] = ald
params['wavelength'] = wavelength
plot.plot_components(x, y, ux, uy, uz, los, params)

plot.plot_los(x, y, ux, uy, uz, los, params)

ind = np.nonzero(x == 0)
plot.plot_profile(ind, ux, uy, uz, los)
"""
